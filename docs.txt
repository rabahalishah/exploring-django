Django Course
I am using ubuntu as an OS

************Django project setup
Make sure you have python3 installed. If not the run:
Installing Python:

sudo apt update
sudo apt install python3
python3 --verison


Now before installing djagon you have to create a virtual environment. For that you have to install pip

Installing PIP:
sudo apt update
sudo apt install python3-pip
pip3 --verison

Installing virtualenv:

pip3 install virtualenv


Now create a folder where you want to create your virtual enviroment:

virtualenv -p python3 .

Activating virtual env:

source ./bin/activate

Installing Django:

pip3 install django
django-admin --version

now create a src folder and go into the src folder and run:

django-admin startproject myproject .


You are done!


******************Running the django server
Go to your project source folder and run: (make sure your vritual env is activate)

python manage.py runserver

**********Settings.py

in your project folder there would be settings.py Here we can set all our settings to the project. Like secret keys and databases etc.

once you had make changes you have to run:

python manage.py migrate


************Creating Django Apps/ Django built in apps

You can think apps as the componets. If you would go into the django settings.py you might see the section of installed apps. There you can see already installed apps and you can add third party apps as well.

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Creating a super user:

run:
python manage.py createsuperuser

then give username, email, password


Now go to 	http://127.0.0.1:8000/admin/

and login

Here django has created a user for me and stored it into the database automatically.


Uptil now we have explored the following django builtin apps:

'django.contrib.admin',
'django.contrib.auth',

************Creating custom apps:
In django we can create as my apps we want. As we have already discussed that in django apps are components which then combine creates a full application. This helps us to keep our logic separated and clean.

you can creat you app like that:

pyhton manage.py startapp your_app_name

after hitting enter you will see in you directory there will be a folder containing several files will be created. Now you can manage all your stuff there. There will be a file called models.py
Here you will define your models (means you database related stuff). All models you will define here will be map through your database.


after doing this you have to put the name of your app that you have created, in the installed apps section:

Now wirte code for you app. Let say I want to create models for my product:

from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.TextField()
    description = models.TextField()
    price = models.TextField()



once you have done with your code. now you have to migrate for that you have to run:

python manage.py makemigrations
python manage.py migrate


NOTE: Whenever we would make any changes in the model of our app we would have to run these following commands every time:
python manage.py makemigrations
python manage.py migrate

//In models.py
from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.TextField()
    description = models.TextField()
    price = models.TextField()
    summary = models.TextField(default='This is a cool product.')



// in admin.py
from django.contrib import admin

from .models import Product
# Register your models here.


admin.site.register(Product)



Now again run:
python manage.py makemigrations
python manage.py migrate


and go to the django admin http://127.0.0.1:8000/admin/ you will see a new app namely products:


***********Adding objects to the model using django shell
you can run django shell by running:

python manage.py shell

now you will be entered into the a shell:


from products.models import Product // this is how you import your models in python shell

Product.objects.all() //this is how you can get all your objects in product model

Product.objects.create(title="another product", description= "another description", price="20.22", summary="another summary") //this is how you create new objects in your model


NOTE: Uptil now we have learnt how to setup django projects, leanred about django setitngs and how to create our own django apps. We have also learnt that how to create models and how to import models in admin.py and also learnt about django shell and how to add objects to your model using shell and how to migrate your django app.

Now its time to create a our model more realistic

****************Addings realistic fields to our models (with deleting database):
Here I am making changes. But before that I have deleted some files from migrations and even deleted my database file and then made changes and then migrated. The whole scenario is simple that I am creating my database and its models again.
from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(decimal_places=2, max_digits=10000)
    summary = models.TextField()



now agaim run

python manage.py makemigrations
python manage.py migrate



************************Making changes to the column without deleting the database:
from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(decimal_places=2, max_digits=10000)
    summary = models.TextField()
    featured = models.BooleanField() // <--- Added this field
    
    

NOTE: Django doesn't know how many objects were already present in the database with already existing 4 properties. What should be the value of the fifth property in already existing objects in database? Here you have to provide a default value. and then you can run:

python manage.py makemigrations
python manage.py migrate

IMPORTANT: You might have noticed that on evey changes you made and then make migrations. You will see an addition of new file containing the changes you made.


*****************Custom pages in django
You have seen a folder called views. In this page you have define view for your app. lets create a new app and make a custom page

python manage.py startapp pages

Pages folder must be created. Now go to the views.py
Dont forget to add this pages app in your installed app list of settings.py

// in settings.py:

//...rest of the code

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # My Own app

    'products',
    'pages',
]

//...rest of the code


// inside views.py of Pages app

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.

def home_view():
    return HttpResponse("<h1>Hello World</h1>")

***Now its time to define url for this page so that we can see this page. 
For that go to the urls.py folder in your trydjango app

// in urls.py

from django.contrib import admin
from django.urls import path
from pages.views import home_view // <--added this line

urlpatterns = [
    path('', home_view, name='home'), //<--added this line
    path('admin/', admin.site.urls),
]


NOTE: You can add as many views you want. Lets add another view let say contacts in the pages.views

//in views.py of pages app

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.


def home_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    return HttpResponse("<h1>Hello World</h1>")


def contact_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    print(args, kwargs)
    return HttpResponse("<h1>Contact Page</h1>")


// In urls.py of trydjango:

from django.contrib import admin
from django.urls import path
from pages.views import home_view, contact_view

urlpatterns = [
    path('', home_view, name='home'),
    path('contact/', contact_view, name='contact'),
    path('admin/', admin.site.urls),
]



IMPORTANT: Here you have to notice a behaviour that whenever we hit the defined url something is request and the response is given. In our case the response is an html page. We can use this request response to create some desired functions.




************Django Templates
Creating django templates is simply like creating html files in a "templates" folder which will be located inside source folder. And then giving the address of this folder in templates section of settings.py. And in views now instead of returning httpResponse you have to response render(request, "anyfile.html", {})

//inside views of pages
from django.shortcuts import render

# Create your views here.
def home_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    return render(request, "home.html", {}) # <--added this lines


def contact_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    print(args, kwargs)

    return render(request, "contact.html", {}) # <--added this lines
    
NOTE: Here {} are the dictionaries (objects) in python. We will discuss about them later
    
// now create a templates folder inside src folder and make home.html and contact.html files in it.

//inside settings.py
//.....rest of this code

import os
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")], #<-- Added this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

//.....rest of this code


now on hitting the defined urls inside urls.py these templates will render

***************Django Template inheritance

using this you can share data across several html pages
simply create an base.html file inside templates folder

// inside base.html
<!DOCTYPE html>
<html>
  <header>
    <title>Django Template inheritance</title>
  </header>
  <body>
    <h1>This line is from base.html</h1>
    {% block content %}
    This space inside these wrapper will work as a placeholder
    {% endblock content %}
    
  </body>
</html>


//inside home.html
{% extends 'base.html' %}

{% block content %}
<h1>Home Page</h1>
<h1>This is home template</h1>
{% endblock content %}


//inside contact.html
{% extends "base.html" %} {% block content %}
<h1>Contact Page</h1>
<h1>This is contact template</h1>
{% endblock content %}



**************Include tag in Django template inheritance 
Let say you want to inherit another html file inside one. Like NavBar will be using in all files so this is a good idea to create a separate file of navBar.html and then import it using include tag in base.html

This is exactly like using components in react.

//inside base.html
<!DOCTYPE html>
<html>
  <header>
    <title>Django Template inheritance</title>
  </header>
  <body>
      
      {% include "navBar.html" %} <---Added this line


    <h1>This line is from base.html</h1>

    {% block content %}
    This space inside these wrapper will work as a placeholder
    {% endblock content %}
    
  </body>
</html>


*****************Context in Django Templates
This context is very helpful to pass data in these templates through views. As we know that we use our render() fucntion inside views.py and there we have {} this dictionary option where we can pass our data.


//In views.js:
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.


def home_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    my_context = {
        "about_home": "This is my home",
        "more_information": "This house is located in Los angelas"
    }
    return render(request, "home.html", my_context) #<-- passing context in render function


def contact_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    print(args, kwargs)
    my_context = {
        "about_us": "This is about us"

    }
    return render(request, "contact.html", my_context) #<-- passing context in render function


# In home.html

{% extends 'base.html' %}

{% block content %}
<h1>Home Page</h1>
<h1>This is home template</h1>

{{about_home}} #<-- this is how we can use the context. Keys will be the name of the variables to access their values
{{more_information}} #<-- this is how we can use the context. Keys will be the name of the variables to access their values

{% endblock content %}


# In contact.html

{% extends "base.html" %} {% block content %}
<h1>Contact Page</h1>
<h1>This is contact template</h1>

{{about_us}} {% endblock content %}


*****************Using loop in django templates
What if we have data coming from the database in the form of a list and then we want to loop over the data. So below is the method you can apply for loop inside django templates:
// In views.py of pages

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.


def home_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    my_context = {
        "about_home": "This is my home",
        "more_information": "This house is located in Los angelas",
        "my_list": [12, 13, 14, 15] #<-- here is the list that we want to render
    }
    return render(request, "home.html", my_context)


def contact_view(request, *args, **kwargs):
    print("args, kwargs: ", args, kwargs)
    print("REQUEST: ", request)
    print(args, kwargs)
    my_context = {
        "about_us": "This is about us"

    }
    return render(request, "contact.html", my_context)


// In home.html

{% extends 'base.html' %} {% block content %}
<h1>Home Page</h1>
<h1>This is home template</h1>
{{about_home}}

{{more_information}} 



{{my_list}} 

{% for sub_items in my_list %} //this is how we start loop in django template html page
<li>
    {{sub_items}}
</li>
{% endfor %} // in django template we also have to close the loop


{% endblock content %}



NOTE: You might have been asking yourself that why we are using django templates and why we are rendering our data using the context and applying loops over it. So lets understand it with a practicle application. In real life the data will be coming from the database via models.py and views.py we handle all our logic stuff and then we pass this data that is coming from the database to the django templates where we can conditionally render it. If there is a case that when we are making our front end using django template. But in most of the cases you will create APIs and then those APIs will be used in you front end applications.


***************Conditions in django templates

{% extends 'base.html' %} {% block content %}
<h1>Home Page</h1>
<h1>This is home template</h1>
{{about_home}}

{{more_information}} 



{{my_list}} 

{% for sub_items in my_list %}
    {% if sub_items == 1422 %} #<-- If condition started
    <p>14 number detected</p>  # On this statement becomes true then render this
    {% elif sub_items == 1222 %}
    <p>12 number detected</p>
    {% else %}
    <p>Else conditioned run</p>
    {% endif %} 		#<-- If condition ended
<li>
    {{sub_items}}
</li>
{% endfor %}


{% endblock content %}



*********Django templates built-in tags
Built-in Filters:

{% extends 'base.html' %} {% block content %}
<h1>Home Page</h1>
<h1>This is home template</h1>
{{about_home}}

{{more_information}} 



{{my_list}} 

{% for sub_items in my_list %}
    {% if sub_items == 14 %}
    <p>14 number detected now adding 20 into it, {{sub_items|add:20}}</p>  #<-- value|add:20 is built in filter that adds 20 or anynumber to the value left to the pipe |
    {% elif sub_items == 1222 %}
    <p>12 number detected</p>
    {% else %}
    <p>Else conditioned run</p>
    {% endif %}
<li>
    {{sub_items}}
</li>
{% endfor %}


{% endblock content %}



********************Retrieving data from the backend
First of all you must have a model.

// In models.py of product app:
from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(decimal_places=2, max_digits=10000)
    summary = models.TextField()
    featured = models.BooleanField()



// In views.py of Product app

from django.shortcuts import render
from .models import Product     #<-- This is how you will import you models

# Create your views here.


def product_detail_view(request):
    obj = Product.objects.get(id=3)  <-- Here we are selecting our product by using its id and storing it into an obj variable
    context = {
        'title': obj.title,
        'description': obj.description,
        'price': obj.price,
        'summary': obj.summary,
        'featured': obj.featured,

    }

    return render(request, "product/detail.html", context)
    


// In Templates folder create a product folder and inside that create detail.html

{% extends 'base.html' %} {% block content %}

<h3>below data is coming from the database:</h3>
<h1>{{title}}</h1>
<p>{{description}}</p>
<p>{{price}}</p>
<p>{{summary}}</p>
<p>{{featured}}</p>
{% endblock content %}


// in urls.py

from django.contrib import admin
from django.urls import path
from pages.views import home_view, contact_view
from products.views import product_detail_view

urlpatterns = [
    path('', home_view, name='home'),
    path('contact/', contact_view, name='contact'),
    path('product/', product_detail_view, name='product'), #<-- defined url
    path('admin/', admin.site.urls),
]


now search localhost:8000/product


*****************Better way to define models data

// In views.py of product ap[:
from django.shortcuts import render
from .models import Product

# Create your views here.


def product_detail_view(request):
    obj = Product.objects.get(id=3)
    context = {
        'objects': obj

    }

    return render(request, "product/detail.html", context)

// in detail.html

{% extends 'base.html' %} {% block content %}

<h3>below data is coming from the database:</h3>
<h1>{{objects.title}}</h1>
<p>{{objects.description}}</p>
<p>{{objects.price}}</p>
<p>{{objects.summary}}</p>
<p>{{objects.featured}}</p>

{% endblock content %}


*************How to create a form in django and how to enter data into that model?
First of all you must have a model:

//In models.py of product app:
from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(decimal_places=2, max_digits=10000)
    summary = models.TextField()
    featured = models.BooleanField(default=False)


//Create a forms.py file


from django import forms
from .models import Product


class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = [    #<-- Here I have added only selective fields. You can add as much as you can from your models.py
            'title',
            'description',
            'price'
        ]


// In views.py
from django.shortcuts import render
from .models import Product
from .forms import ProductForm

# Create your views here.

def product_create_view(request):
    form = ProductForm(request.POST or None)  #<-- grabbing data from the post request
    if form.is_valid():  		      #<-- checcking whether the form is valid or not
        form.save()      		      #<-- after validation saving the form data
        form = ProductForm()		      #<-- clearing the form state

    context = {
        'form': form,                         #<-- passing form data once, 

    }

    return render(request, "product/product_create.html", context)
    
    
    
    
 
 ****************Saving data into database from the raw HTMl form (Bad way to store data in DB):
 

// In views.py of Product
def product_create_view(request):
    if request.method == 'POST':
        my_new_title = request.POST.get('title')
        print(my_new_title)
        # Product.objects.create(title=my_new_title) #<-- this is how you can store data in database

    context = {}

    return render(request, "product/product_create.html", context)
    
    
// In product_create.html
{% extends 'base.html' %} {% block content %}

<form action="." method="POST"> {% csrf_token %}  #<-- here in actions we can send our input data to the url entered in the actions e.g actions="http://www.google.com/search"
  <input placeholder="Enter title" type="text" name="title" />
  <input  type="submit" value="save" />
</form>
{% endblock content %}


NOTE: This is not a good way to store data in database. Because here we are not validating the data before saving it into the database. Here we have simply created an HTML form and get that from the request argument.

***************Pure Django forms

// In forms.py of product app
class RawProductFrom(forms.Form):
    title = forms.CharField()
    description = forms.CharField()
    price = forms.DecimalField()
    
    
// In views.py of product app
from .forms import RawProductFrom
from django.shortcuts import render
from .models import Product

# Django pure forms
def product_create_view(request):
    my_form = RawProductFrom() 
    if request.method == 'POST':
        my_form = RawProductFrom(request.POST)  #<-- grabbing the post data
        if my_form.is_valid():
            print(my_form.cleaned_data)

        Product.objects.create(**my_form.cleaned_data)  #<--passing the cleaned data as an argument ** to the product model

    context = {"form": my_form}

    return render(request, "product/product_create.html", context)    
    
// In product_create.html

{% extends 'base.html' %} {% block content %}

<form method="POST">
  {% csrf_token %} {{ form.as_p}}

  <input type="submit" value="save" />
</form>
{% endblock content %}



******************Form widgets:
Using form widgets you can apply attributes to your html fields
// In forms.py
class RawProductFrom(forms.Form):
    title = forms.CharField()
    description = forms.CharField(required=False, widget=forms.Textarea( 
        attrs={"placeholder": "My Description",
               "class": "new-class-name",
               "rows": 20,
               "columns": 100
               }))
    price = forms.DecimalField()
    
    



NOTE: Since we are dealing with pure Django forms so we will be managing our html properties of HTML using django builtin features
    

********************Django Forms validations

class ProductForm(forms.ModelForm):

    title = forms.CharField()                          #<-- Here we are overriding our title, description and price fields
    description = forms.CharField(required=False, widget=forms.Textarea(
        attrs={"placeholder": "My Description",
               "class": "new-class-name",
               "rows": 20,
               "columns": 100
               }))
    price = forms.DecimalField()

    class Meta:
        model = Product
        fields = [
            'title',
            'description',
            'price'
        ]
    # Custom validations <-- here before submitting the form we are checking whether the title contains rabah or not.

    def cleaned_title(self, *args, **kwargs):
        title = self.cleaned_data.get("title")
        if not "rabah" in title:
            raise forms.ValidationError("This is not a valid title")
        else:
            return title

*********************Initial value of the form

You can give initial value to the form with the help of using views.py file:

// In views.py of Product app:
def product_create_view(request):
    initial_data = {
        'title': "This is my initial title"
    }

    form = ProductForm(request.POST or None, initial=initial_data)
    if form.is_valid():
        form.save()
        form = ProductForm()

    context = {
        'form': form,

    }

    return render(request, "product/product_create.html", context)
    
    
*****************Initial value to a specific object:

def product_create_view(request):
    initial_data = {
        'title': "This is my initial title"
    }
    obj = Product.objects.get(id=1)
    form = ProductForm(request.POST or None,
                       instance=obj, initial=initial_data)  #<--using instance attribute
    if form.is_valid():
        form.save()
        form = ProductForm()

    context = {
        'form': form,
    }

    return render(request, "product/product_create.html", context)
    
    
 *******************Dynamic URLS
 
 Dynamic url is very simle. All you have to do some change in the urls.py like below:
 
// In urls.py:

from django.contrib import admin
from django.urls import path

from products.views import dynamic_lookup_view

urlpatterns = [

    path('product/<int:my_id>/', dynamic_lookup_view, name='dynamic'), # <-- here we are adding my_id a dynamica argument which we can access in our views
    path('admin/', admin.site.urls),
]

// In views,py

from django.shortcuts import render
from .models import Product
def dynamic_lookup_view(request, my_id): #<-- this my_id argument is coming from dynamic url
    obj = Product.objects.get(id=my_id)
    context = {
        "object": obj
    }
    return render(request, "product/product_detail.html", context)

// In product_detail.html
{% extends 'base.html' %} {% block content %}

<h3>below data is coming from the database:</h3>
<h1>{{object.title}}</h1>
<p>{{object.description}}</p>
<p>{{object.price}}</p>
<p>{{object.summary}}</p>
<p>{{object.featured}}</p>
{% endblock content %}


****************Handling page not found
There are two ways to do that:

1) using  get_object_or_404 from django.shortcuts
2) Http404 from djnago.http


***Method 1:
from django.shortcuts import render, get_object_or_404
from .models import Product
def dynamic_lookup_view(request, my_id): # <-- this my_id argument is coming from dynamic url
    obj = get_object_or_404(Product, id=my_id)
    context = {
        "object": obj
    }
    return render(request, "product/product_detail.html", context)
    
    
***Method 2:
from django.shortcuts import render
from django.http import Http404
from .models import Product

def dynamic_lookup_view(request, my_id):
    try:
        obj = Product.objects.get(id=my_id)
    except Product.DoesNotExist:
        raise Http404

    context = {
        "object": obj
    }
    return render(request, "product/product_detail.html", context)

    
***************Deleting objects using dynamic url in django:
// In views.py of product app:

def dynamic_delete_view(request, my_id):
    obj = get_object_or_404(Product, id=my_id)
    if request.method == "POST":
        # confirming post request then deleting the object
        obj.delete()
        return redirect('../')

    context = {
        "object": obj
    }
    return render(request, "product/product_delete.html", context)
    
    
 // In product_delete.html
 
 {% extends 'base.html' %} {% block content %}
<form method="POST">
  {% csrf_token %}
  <h1>Do you want to delete this product "{{object.title}}" ?</h1>
  <p>
    <input type="submit" value="Yes" />
    <a href="../">Cancel</a>
  </p>
</form>

{% endblock content %}

// In urls.py

from django.contrib import admin
from django.urls import path
from products.views import dynamic_lookup_view, dynamic_delete_view, product_detail_view



urlpatterns = [

    path('product/', product_detail_view, name='product'),

    path('product/<int:my_id>/delete',
         dynamic_delete_view, name='product-delete'),
    path('admin/', admin.site.urls),
]

*************Getitng the list of all objects from the database:

// In views.py in Product

def product_list_view(request):
    objects_list = Product.objects.all()
    context = {
        "object_list": objects_list
    }
    return render(request, "product/product_list.html", context)
    
// In product_list.html:
{% extends 'base.html' %} 

{% block content %}
 {{object_list}} 
 
{% for instance in object_list %}
<p>{{instance.id}} - {{instance.title}}</p>

{% endfor %} 
{% endblock content %}


// In Urls.py
urlpatterns = [
path('allproducts/',product_list_view , name='product'),
}


**********************How to get absolute URL:
// in models.py
from django.db import models

# Create your models here.


class Product(models.Model):
    title = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(decimal_places=2, max_digits=10000)
    summary = models.TextField()
    featured = models.BooleanField(default=False)

# Below is the way to get absolute url 
    def get_absolute_url(self):
        return f"product/{self.id}/"


//In product_list.html

{% extends 'base.html' %} 
{% block content %} 

{{object_list}} 

{% for instance in object_list %}
<p>
  {{instance.id}} - <a href="{{ instance.get_absolute_url }}">{{instance.title}}</a>
</p>

{% endfor %} 
{% endblock content %}


******************Good practice to make your linked urls dynamic
from django.db import models
from django.urls import reverse

# Create your models here.


class Product(models.Model):
    title = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(decimal_places=2, max_digits=10000)
    summary = models.TextField()
    featured = models.BooleanField(default=False)

# Below is the way to get absolute url
    def get_absolute_url(self):
        # syntax: reverse("name of url we defined in the path function inside url array in url.py", kwargs={key:value}) 
        # here key is the variable in the url and value is the dynamic value from the model
        return reverse("product", kwargs={"my_id": self.id})


// In urls.py
path('product/<int:my_id>/', dynamic_lookup_view, name='product'), #<-- here name='product'


// In product_list.html

{% extends 'base.html' %} 
{% block content %} 

{{object_list}} 

{% for instance in object_list %}

<p>
  {{instance.id}} - <a href="{{ instance.get_absolute_url }}">{{instance.title}}</a>
</p>

{% endfor %} 
{% endblock content %}


NOTE: here instance.get_absolute_url will call get_absolute_url defined in models.py function. This will add redirect to product/selected_id


*************************Refactoring the urls: Creating separate urls.py for products app
Here we are going to create separate urls.py for our Product app to make it completely useable component:


// Inside urls.py of product app:
from django.urls import path
from .views import dynamic_lookup_view, dynamic_delete_view, product_list_view, product_create_view, product_detail_view

urlpatterns = [
    path('', product_list_view, name='products'),
    path('create/', product_create_view, name='product_create'),
    path('<int:my_id>/', dynamic_lookup_view, name='product'),     # <-- here we are getting id dynamically
    path('<int:my_id>/delete',
         dynamic_delete_view, name='product-delete'),
]



NOTE: Since we have extracted our code from urls.py of the main project to the urls.py of product app so we have to make some link it with the original urls.py of the main product.


// Im urls.py of trydjango app:

from django.contrib import admin
from django.urls import path, include
from pages.views import home_view, contact_view

urlpatterns = [
    path('products/', include('products.urls')), #<-- include is the keyword that we used to include another URLconf

    path('', home_view, name='home'),
    path('contact/', contact_view, name='contact'),
    path('admin/', admin.site.urls),
]


**********Class based views:
Class based views are some how seems more complex than function based views. The reason is that many of the things are automated because class based views are inherite of other django built in classes. Therefore, a good knowledge is required while creating class based views:

// models.py of blog app:
from django.db import models
from django.urls import reverse

# Create your models here.


class Article(models.Model):
    title = models.CharField(max_length=120)
    content = models.TextField()
    active = models.BooleanField(default=True)

    def get_absolute_url(self):
        return reverse("article", kwargs={"pk": self.id})

// forms.py of blog app:

from django import forms
from .models import Article


class ArticleModelForm(forms.ModelForm):
    class Meta:
        model = Article
        fields = [
            'title',
            'content',
            'active'
        ]
// views.py of blog app:

from django.db.models.base import Model as Model
from django.shortcuts import get_object_or_404
from django.urls import reverse
from django.views.generic import (
    CreateView,
    DetailView,
    ListView,
    UpdateView,
    DeleteView
)

from .models import Article
from .forms import ArticleModelForm

# Create your views here.


class AritcleListView(ListView):
    # here we are overriding our template names. Cuz by default django wants
    # name something like like that  <blog>/<modelName>_list.html but we want to use our custom so:
    template_name = 'articles/article_list.html'
    queryset = Article.objects.all()
    # here I do not have to do render, do not have to write template name etc. Just because of django builtin
    # ListView. I have inherite Listview inside my ArticleListView class


class AritcleDetailView(DetailView):
    template_name = 'articles/article_detail.html'

    def get_object(self):
        # <-- This is how we grab id from the url in class based views
        id_ = self.kwargs.get("pk")
        return get_object_or_404(Article, id=id_)

# note: In class based views the class views are inherite from other classes therefore, we have to override the things
# like we have done above by using get_object()


class AritcleCreateView(CreateView):
    template_name = 'articles/article_create.html'
    form_class = ArticleModelForm
    queryset = Article.objects.all()

    def form_valid(self, form):
        print(form.cleaned_data)
        return super().form_valid(form)


class AritcleUpdateView(UpdateView):
    template_name = 'articles/article_create.html'
    form_class = ArticleModelForm
    queryset = Article.objects.all()

    def get_object(self):
        id_ = self.kwargs.get("pk")
        return get_object_or_404(Article, id=id_)

    def form_valid(self, form):
        print(form.cleaned_data)
        return super().form_valid(form)


class AritcleDeleteView(DeleteView):
    template_name = 'articles/article_delete.html'

    def get_object(self):
        # <-- This is how we grab id from the url in class based views
        id_ = self.kwargs.get("pk")
        return get_object_or_404(Article, id=id_)
    def get_success_url(self) :
        return reverse('article-list')
        
**********************get and post method on classes:
Class based views are mostly used as they provide inheritance features. If one class is inherited in other class then all the  methods inside that class will be called which we dont have to call separately:

from django.views import View
from .forms import CourseModelForm

class CourseCreateView(View):

	template_name = "course/course_create.html"
	
	def get(self, request, *args, **kwargs):
		form = CourseModelForm()
		context: {"form": form}
		retrun render(request, self.template_name, context)
	
	
	def post(self, request, *args, **kwargs):
		form = CourseModelForm(request.POST)
		if form.is_valid():
			form.save()
			form = CourseModelForm() #<-- this will just clear fields after submitting the form
		context: {"form": form}
		return render(request, self.template_name, context)
		
	

***************Raw validations on class based views:
from django import forms
from .models import Article


class ArticleModelForm(forms.ModelForm):
    class Meta:
        model = Article
        fields = [
            'title',
            'content',
            'active'
        ]
        
    # syntax:def clean_<your_field_name>():

    def clean_title():
       titile = self.cleaned_data.get('title')
       if title.lower() == 'abc':
       	   raise forms.validationError("This is not a valid title)
       return title
       	   
       




